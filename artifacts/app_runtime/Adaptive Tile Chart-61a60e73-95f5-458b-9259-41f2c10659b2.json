{
	"id": "61a60e73-95f5-458b-9259-41f2c10659b2",
	"createdAt": "2022-02-04T15:46:44.660Z",
	"updatedAt": "2022-08-03T11:10:32.160Z",
	"createdBy": "luuk.wosten@neptune-software.com",
	"changedBy": "kristin.eliassen@neptune-software.com",
	"objects": [
		{
			"fieldNo": "5d02ca1f-664d-4451-de25-aeb579e08484",
			"fieldName": "boxTile",
			"fieldParent": 0,
			"fieldType": "sap.m.VBox",
			"script": "",
			"request": [],
			"response": [],
			"attributes": [
				{
					"attribute": "width",
					"grouping": "Properties",
					"value": "100%",
					"script": "",
					"translation": []
				},
				{
					"attribute": "height",
					"grouping": "Properties",
					"value": "100%",
					"script": "",
					"translation": []
				}
			],
			"data": [
				{
					"fieldNo": "9c02b84d-2e01-4471-98eb-aafc7609cfdd",
					"fieldName": "panFilter",
					"fieldParent": "5d02ca1f-664d-4451-de25-aeb579e08484",
					"fieldType": "sap.m.Panel",
					"script": "",
					"request": [],
					"response": [],
					"attributes": [
						{
							"attribute": "visible",
							"grouping": "Properties",
							"value": "{AppConfig>/settings/properties/form/showFilter}",
							"script": "",
							"translation": []
						},
						{
							"attribute": "styleClassPadding",
							"grouping": "Properties",
							"value": "sapUiNoContentPadding",
							"script": "",
							"translation": []
						},
						{
							"attribute": "backgroundDesign",
							"grouping": "Properties",
							"value": "Solid",
							"script": "",
							"translation": []
						}
					],
					"data": []
				},
				{
					"fieldNo": "4382da7c-7fa5-4a3b-a488-697e41c95eb1",
					"fieldName": "panChart",
					"fieldParent": "5d02ca1f-664d-4451-de25-aeb579e08484",
					"fieldType": "sap.m.Panel",
					"script": "",
					"request": [],
					"response": [],
					"attributes": [
						{
							"attribute": "styleClassPadding",
							"grouping": "Properties",
							"value": "sapUiNoContentPadding",
							"script": "",
							"translation": []
						},
						{
							"attribute": "styleClass",
							"grouping": "Properties",
							"value": "nepNoBorder",
							"script": "",
							"translation": []
						},
						{
							"attribute": "height",
							"grouping": "Properties",
							"value": "100%",
							"script": "",
							"translation": []
						},
						{
							"attribute": "backgroundDesign",
							"grouping": "Properties",
							"value": "Transparent",
							"script": "",
							"translation": []
						}
					],
					"data": [
						{
							"fieldNo": "d3c37c50-6db1-4296-9219-7d68c2757311",
							"fieldName": "chartHTML",
							"fieldParent": "4382da7c-7fa5-4a3b-a488-697e41c95eb1",
							"fieldType": "sap.ui.core.HTML",
							"script": "",
							"request": [],
							"response": [],
							"attributes": [
								{
									"attribute": "afterRendering",
									"grouping": "Events",
									"value": "Anonymous Function",
									"script": [
										"==OBJECT STRING==",
										"var runtime = true;\r",
										"if (localAppID === \"ADAPTIVEDESIGNER\") runtime = false;\r",
										""
									],
									"translation": []
								}
							],
							"data": []
						}
					]
				}
			]
		},
		{
			"fieldNo": 99999,
			"data": [
				{
					"fieldNo": "30dbc543-06c3-426f-cb39-6eeb0da3f348",
					"fieldName": "Adaptive",
					"fieldParent": 99999,
					"fieldType": "neptune.folder",
					"script": "",
					"request": [],
					"response": [],
					"attributes": [],
					"data": [
						{
							"fieldNo": "9538462d-31af-41f6-b485-465a0b64b6a4",
							"fieldName": "AppConfig",
							"fieldParent": "30dbc543-06c3-426f-cb39-6eeb0da3f348",
							"fieldType": "neptune.model",
							"script": "",
							"bindingValue": "Generic Array",
							"bindingType": "h",
							"bindingSource": "P9",
							"dataModel": {},
							"request": [],
							"response": [],
							"attributes": [],
							"data": []
						},
						{
							"fieldNo": "9e2b250b-e03e-44f5-a57f-dbe049e6e316",
							"fieldName": "AppData",
							"fieldParent": "30dbc543-06c3-426f-cb39-6eeb0da3f348",
							"fieldType": "neptune.model",
							"script": "",
							"bindingValue": "Generic Array",
							"bindingType": "h",
							"bindingSource": "P9",
							"dataModel": {},
							"request": [],
							"response": [],
							"attributes": [],
							"data": []
						},
						{
							"fieldNo": "800a40be-379c-4cb1-e080-75d3ae58bdb8",
							"fieldName": "Metadata",
							"fieldParent": "30dbc543-06c3-426f-cb39-6eeb0da3f348",
							"fieldType": "neptune.Script",
							"script": [
								"==OBJECT STRING==",
								"const metadata = {\r",
								"\r",
								"    properties: {\r",
								"\r",
								"        enableForm: true,\r",
								"        enableTable: true,\r",
								"        titleForm: \"Filter\",\r",
								"        titleTable: \"Chart\",\r",
								"        iconForm: \"/public/icons/s_b_filt.gif\",\r",
								"        iconTable: \"/public/icons/s_gisbar.gif\",\r",
								"\r",
								"        report: {\r",
								"\r",
								"            titleTable: { type: \"Title\", label: \"Properties\" },\r",
								"            paginationRows: { type: \"Input\", label: \"Max Number of Items\", default: 10 },\r",
								"            updateTime: { type: \"Input\", label: \"Update Every (Min)\", default: 0 },\r",
								"\r",
								"            titleTableGroup: { type: \"Title\", label: \"Sorting 1\" },\r",
								"            initialGroupField: { type: \"TableFieldLocal\", label: \"Field\" },\r",
								"            initialGroupOrder: {\r",
								"                type: \"SingleSelect\",\r",
								"                label: \"Order\",\r",
								"                items: [\r",
								"                    { key: \"\", text: \"\" },\r",
								"                    { key: \"ASC\", text: \"Ascending\" },\r",
								"                    { key: \"DESC\", text: \"Descending\" }\r",
								"                ]\r",
								"            },\r",
								"\r",
								"            titleTableSort: { type: \"Title\", label: \"Sorting 2\" },\r",
								"            initialSortField: { type: \"TableFieldLocal\", label: \"Field\" },\r",
								"            initialSortOrder: {\r",
								"                type: \"SingleSelect\",\r",
								"                label: \"Order\",\r",
								"                items: [\r",
								"                    { key: \"\", text: \"\" },\r",
								"                    { key: \"ASC\", text: \"Ascending\" },\r",
								"                    { key: \"DESC\", text: \"Descending\" }\r",
								"                ]\r",
								"            },\r",
								"\r",
								"\r",
								"        },\r",
								"\r",
								"        form: {\r",
								"\r",
								"            titleSettings: { type: \"Title\", label: \"Properties\" },\r",
								"            enableCompact: { type: \"CheckBox\", label: \"Compact Mode\", default: false },\r",
								"            showFilter: { type: \"CheckBox\", label: \"Show Filter\", default: false },\r",
								"\r",
								"        },\r",
								"\r",
								"        table: {\r",
								"\r",
								"            titleGeneral: { type: \"Title\", label: \"General\" },\r",
								"            title: { type: \"Input\", label: \"Title\" },\r",
								"            subTitle: { type: \"Input\", label: \"Sub Title\" },\r",
								"            chartHeight: { type: \"Input\", label: \"Chart Height\", default: 250 },\r",
								"\r",
								"            chartType: {\r",
								"                type: \"SingleSelect\",\r",
								"                label: \"Type\",\r",
								"                default: \"column\",\r",
								"                items: [\r",
								"                    { key: \"\", text: \"\" },\r",
								"                    { key: \"area\", text: \"Area\" },\r",
								"                    { key: \"arearange\", text: \"Area Range\" },\r",
								"                    { key: \"areaspline\", text: \"Area Spline\" },\r",
								"                    { key: \"areapercent\", text: \"Area Percent\" },\r",
								"                    { key: \"bar\", text: \"Bar\" },\r",
								"                    { key: \"barpercent\", text: \"Bar Percent\" },\r",
								"                    { key: \"barstacked\", text: \"Bar Stacked\" },\r",
								"                    { key: \"column\", text: \"Column\" },\r",
								"                    { key: \"columnpercent\", text: \"Column Percent\" },\r",
								"                    { key: \"columnstacked\", text: \"Column Stacked\" },\r",
								"                    { key: \"line\", text: \"Line\" },\r",
								"                    { key: \"spline\", text: \"Spline\" },\r",
								"                    { key: \"pie\", text: \"Pie\" },\r",
								"                    // { key: \"treemap\", text: \"Treemap\" },\r",
								"                ]\r",
								"            },\r",
								"\r",
								"            titleLayout: { type: \"Title\", label: \"Layout\" },\r",
								"            chartColor: { type: \"Input\", label: \"Custom Colors\" },\r",
								"\r",
								"            titleLegend: { type: \"Title\", label: \"Legend\" },\r",
								"            legendEnable: { type: \"CheckBox\", label: \"Show Legend\", default: true },\r",
								"            legendAlign: {\r",
								"                type: \"SingleSelect\",\r",
								"                label: \"Align\",\r",
								"                default: \"center\",\r",
								"                items: [\r",
								"                    { key: \"center\", text: \"Center\" },\r",
								"                    { key: \"left\", text: \"Left\" },\r",
								"                    { key: \"right\", text: \"Right\" }\r",
								"                ]\r",
								"            },\r",
								"\r",
								"            legendVerticalAlign: {\r",
								"                type: \"SingleSelect\",\r",
								"                label: \"Vertical Align\",\r",
								"                default: \"bottom\",\r",
								"                items: [\r",
								"                    { key: \"bottom\", text: \"Bottom\" },\r",
								"                    { key: \"middle\", text: \"Middle\" },\r",
								"                    { key: \"top\", text: \"Top\" },\r",
								"                ]\r",
								"            },\r",
								"\r",
								"            legendLayout: {\r",
								"                type: \"SingleSelect\",\r",
								"                label: \"Layout\",\r",
								"                default: \"horizontal\",\r",
								"                items: [\r",
								"                    { key: \"horizontal\", text: \"Horizontal\" },\r",
								"                    { key: \"vertical\", text: \"Vertical\" },\r",
								"                    { key: \"proximate\", text: \"Proximate\" },\r",
								"                ]\r",
								"            },\r",
								"\r",
								"            titleXAxis: { type: \"Title\", label: \"xAxis\" },\r",
								"            xAxisTitleEnable: { type: \"CheckBox\", label: \"Show Title\", default: true },\r",
								"\r",
								"            titleYAxis: { type: \"Title\", label: \"yAxis\" },\r",
								"            yAxisTitleEnable: { type: \"CheckBox\", label: \"Show Title\", default: true },\r",
								"\r",
								"            titlePostProcessingScript: { type: \"Title\", label: \"Post Processing\" },\r",
								"            postProcessingScript: { type: \"Script\", label: \"Script\" },\r",
								"\r",
								"        }\r",
								"\r",
								"    },\r",
								"\r",
								"    fieldsSel: {\r",
								"\r",
								"        titleGeneral: { type: \"Title\", label: \"General\" },\r",
								"        text: { type: \"Input\", label: \"Label\" },\r",
								"        type: {\r",
								"            type: \"SingleSelect\",\r",
								"            label: \"Type\",\r",
								"            items: [\r",
								"                { key: \"\", text: \"Input\" },\r",
								"                { key: \"CheckBox\", text: \"CheckBox\" },\r",
								"                { key: \"DateRange\", text: \"DateRange\" },\r",
								"                { key: \"MultiSelect\", text: \"MultiSelect\" },\r",
								"                { key: \"MultiSelectLookup\", text: \"MultiSelect Lookup\" },\r",
								"                { key: \"MultiSelectScript\", text: \"MultiSelect Script\" },\r",
								"                { key: \"SingleSelect\", text: \"SingleSelect\" },\r",
								"                { key: \"SingleSelectLookup\", text: \"SingleSelect Lookup\" },\r",
								"                { key: \"SingleSelectScript\", text: \"SingleSelect Script\" },\r",
								"                { key: \"Switch\", text: \"Switch\" },\r",
								"            ]\r",
								"        },\r",
								"\r",
								"        titleLookup: { type: \"Title\", label: \"Data Source\", visible: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true: false }\" },\r",
								"        lookupTable: { type: \"Table\", label: \"Table\", visible: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true: false }\" },\r",
								"        lookupFieldKey: { type: \"TableField\", label: \"Key Field\", visible: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true: false }\" },\r",
								"        lookupFieldText: { type: \"TableField\", label: \"Text Field\", visible: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true: false }\" },\r",
								"        lookupFieldAdditional: { type: \"TableField\", label: \"Additional Text Field\", visible: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true: false }\" },\r",
								"        lookupShowOnlyText: { type: \"CheckBox\", label: \"Hide Key Field\", visible: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true: false }\" },\r",
								"\r",
								"        titleSelectScript: { type: \"Title\", label: \"Data Source\", visible: \"{= ${/type} === 'MultiSelectScript' || ${/type} === 'SingleSelectScript' ? true: false }\" },\r",
								"        scriptSelect: { type: \"Script\", label: \"Server Script\", visible: \"{= ${/type} === 'MultiSelectScript' || ${/type} === 'SingleSelectScript' ? true: false }\" },\r",
								"\r",
								"        titleDefault: { type: \"Title\", label: \"Default Value\" },\r",
								"        default: { type: \"Input\", label: \"From Value\" },\r",
								"        scriptValue: { type: \"Script\", label: \"From Script\" },\r",
								"\r",
								"        titleSettings: { type: \"Title\", label: \"Properties\" },\r",
								"        required: { type: \"CheckBox\", label: \"Required\", default: false },\r",
								"        visible: { type: \"CheckBox\", label: \"Visible\", default: true }\r",
								"\r",
								"\r",
								"    },\r",
								"\r",
								"    fieldsRun: {\r",
								"\r",
								"        titleGeneral: { type: \"Title\", label: \"General\" },\r",
								"        text: { type: \"Input\", label: \"Label\" },\r",
								"        type: {\r",
								"            type: \"SingleSelect\",\r",
								"            label: \"Type\",\r",
								"            defaukt: \"Data\",\r",
								"            items: [\r",
								"                { key: \"data\", text: \"Row\" },\r",
								"                { key: \"category\", text: \"Column\" },\r",
								"                { key: \"value\", text: \"Value\" },\r",
								"            ]\r",
								"        },\r",
								"\r",
								"        // Value\r",
								"        titleValue: { type: \"Title\", label: \"Value\" },\r",
								"        valueType: {\r",
								"            type: \"SingleSelect\",\r",
								"            label: \"Source\",\r",
								"            items: [\r",
								"                { key: \"\", text: \"Source Value\" },\r",
								"                { key: \"Fixed\", text: \"Fixed Value\" },\r",
								"                { key: \"Lookup\", text: \"Lookup\" },\r",
								"                { key: \"Rule\", text: \"Rules Engine\" },\r",
								"                { key: \"Script\", text: \"Script (from post processing)\" },\r",
								"            ]\r",
								"        },\r",
								"        valueFixed: { type: \"Input\", label: \"Fixed Value\", visible: \"{= ${/valueType} === 'Fixed' ? true: false }\" },\r",
								"        valueLookup: { type: \"Lookup\", label: \"Lookup\", visible: \"{= ${/valueType} === 'Lookup' ? true: false }\" },\r",
								"        valueRule: { type: \"Rule\", label: \"Rules Engine\", visible: \"{= ${/valueType} === 'Rule' ? true: false }\" },\r",
								"        formatter: {\r",
								"            type: \"SingleSelect\",\r",
								"            label: \"Formatter\",\r",
								"            items: [\r",
								"                { key: \"\", text: \"\" },\r",
								"                { key: \"date00\", text: \"Date Browser Format\" },\r",
								"                { key: \"date01\", text: \"Date (dd.mm.yyyy)\" },\r",
								"                { key: \"date02\", text: \"Date (mm-dd-yyyy)\" },\r",
								"                { key: \"date03\", text: \"Date (Month)\" },\r",
								"                { key: \"date04\", text: \"Date (Quarter)\" },\r",
								"                { key: \"sapdate01\", text: \"SAP Date (dd.mm.yyyy)\" },\r",
								"                { key: \"sapdate02\", text: \"SAP Date (mm-dd-yyyy)\" },\r",
								"                { key: \"zero\", text: \"Remove Leading Zero\" },\r",
								"                { key: \"uppercase\", text: \"Upper Case\" },\r",
								"                { key: \"lowercase\", text: \"Lower Case\" },\r",
								"            ]\r",
								"        },\r",
								"\r",
								"        titleSettings: { type: \"Title\", label: \"Properties\" },\r",
								"        visible: { type: \"CheckBox\", label: \"Visible\", default: true }\r",
								"\r",
								"    }\r",
								"}\r",
								""
							],
							"request": [],
							"response": [],
							"attributes": [],
							"data": []
						},
						{
							"fieldNo": "ab6de925-f229-4718-b25d-83c69f386c39",
							"fieldName": "Function",
							"fieldParent": "30dbc543-06c3-426f-cb39-6eeb0da3f348",
							"fieldType": "neptune.Script",
							"script": [
								"==OBJECT STRING==",
								"var report = {\r",
								"\r",
								"    chartId: \"tileChart\" + ModelData.genID(),\r",
								"    chart: null,\r",
								"    metadata: metadata,\r",
								"    childPage: null,\r",
								"    groupBy: null,\r",
								"    groupOrder: null,\r",
								"    sortBy: null,\r",
								"    sortOrder: null,\r",
								"    pages: {},\r",
								"    initId: null,\r",
								"\r",
								"    pagination: {\r",
								"        take: 10,\r",
								"        index: 0,\r",
								"        count: 0\r",
								"    },\r",
								"\r",
								"    events: {\r",
								"\r",
								"        afterChildLoad: function () {\r",
								"            oApp.to(report.childPage);\r",
								"        },\r",
								"        afterChildSave: function () {\r",
								"            report.run();\r",
								"            oApp.back();\r",
								"        },\r",
								"        onChildBack: function () {\r",
								"            oApp.back();\r",
								"        },\r",
								"        onNavigatePage: function (page) {\r",
								"            if (!report.pages[page.sId]) oApp.addPage(page);\r",
								"            report.childPage = page;\r",
								"            report.pages[page.sId] = true;\r",
								"            oApp.to(page);\r",
								"        }\r",
								"\r",
								"    },\r",
								"\r",
								"    start: function () {\r",
								"\r",
								"        if (!sap.n || !sap.n.Adaptive) {\r",
								"            console.error(\"Neptune Adaptive Framework not found\");\r",
								"            return;\r",
								"        }\r",
								"\r",
								"        sap.n.Adaptive.initApp(this);\r",
								"\r",
								"    },\r",
								"\r",
								"    init: function (config, runtime) {\r",
								"\r",
								"        // Check current config\r",
								"        if (report.initId === config.id && runtime) return;\r",
								"\r",
								"        report.initId = config.id;\r",
								"\r",
								"        // Chart Container\r",
								"        chartHTML.setContent(\"<div id=\" + report.chartId + \" style='height:100%;width:100%'></div>\");\r",
								"\r",
								"        // Set Default Values\r",
								"        sap.n.Adaptive.setDefaultData(config, metadata);\r",
								"\r",
								"        config.settings.properties.report.enablePagination = true;\r",
								"        if (config.settings.properties.report.paginationRows) report.pagination.take = parseInt(config.settings.properties.report.paginationRows);\r",
								"\r",
								"        report.sortBy = config.settings.properties.report.initialSortField || null;\r",
								"        report.sortOrder = config.settings.properties.report.initialSortOrder || \"ASC\";\r",
								"        report.groupBy = config.settings.properties.report.initialGroupField || null;\r",
								"        report.groupOrder = config.settings.properties.report.initialGroupOrder || \"ASC\";\r",
								"\r",
								"        modelAppConfig.setData(config);\r",
								"        modelAppConfig.refresh();\r",
								"\r",
								"        sap.n.Adaptive.init(modelAppConfig.oData).then(function (data) {\r",
								"\r",
								"            if (runtime) {\r",
								"\r",
								"                modelAppConfig.oData.settings.fieldsSel = data.fieldsSelection;\r",
								"                modelAppConfig.oData.settings.fieldsRun = data.fieldsReport;\r",
								"\r",
								"                if (modelAppConfig.oData.settings.fieldsSel) modelAppConfig.oData.settings.fieldsSel.sort(sort_by(\"fieldPos\"));\r",
								"                if (modelAppConfig.oData.settings.fieldsRun) modelAppConfig.oData.settings.fieldsRun.sort(sort_by(\"fieldPos\"));\r",
								"\r",
								"            } else {\r",
								"\r",
								"                $.each(modelAppConfig.oData.settings.fieldsSel, function (i, selField) {\r",
								"                    var selFieldRun = ModelData.FindFirst(data.fieldsSelection, \"name\", selField.name);\r",
								"                    if (selFieldRun && selFieldRun.items) selField.items = selFieldRun.items;\r",
								"                    if (selFieldRun && selFieldRun.default) selField.default = selFieldRun.default;\r",
								"                });\r",
								"\r",
								"                if (report.chart) report.chart = null;\r",
								"\r",
								"            }\r",
								"\r",
								"            $.each(modelAppConfig.oData.settings.fieldsRun, function (i, runField) {\r",
								"                if (!runField.type) runField.type = \"data\";\r",
								"            });\r",
								"\r",
								"            // Key Fields for GET Record \r",
								"            if (modelAppConfig.oData.settings.navigation && modelAppConfig.oData.settings.navigation.keyField && modelAppConfig.oData.settings.navigation.keyField.length) {\r",
								"                $.each(modelAppConfig.oData.settings.navigation.keyField, function (i, mapping) {\r",
								"                    modelAppData.oData[mapping.fieldName] = modelAppConfig.oData.settings.data[mapping.key];\r",
								"                });\r",
								"            }\r",
								"\r",
								"            // Filter\r",
								"            sap.n.Adaptive.buildTableFilter(panFilter, null, modelAppConfig.oData, modelAppData.oData, false, report.run);\r",
								"\r",
								"            setTimeout(function () {\r",
								"                report.run(runtime);\r",
								"            }, 100);\r",
								"\r",
								"        }).catch(function (data) {\r",
								"            if (data.responseJSON && data.responseJSON.status) sap.m.MessageToast.show(data.responseJSON.status);\r",
								"        });\r",
								"\r",
								"    },\r",
								"\r",
								"\r",
								"    run: function (runtime) {\r",
								"\r",
								"        // Max Rows\r",
								"        modelAppData.oData._pagination = {\r",
								"            take: report.pagination.take,\r",
								"            skip: 0\r",
								"        }\r",
								"\r",
								"        // Sorting        \r",
								"        modelAppData.oData._order = {};\r",
								"        if (report.groupBy) modelAppData.oData._order[report.groupBy] = report.groupOrder;\r",
								"        if (report.sortBy) modelAppData.oData._order[report.sortBy] = report.sortOrder;\r",
								"\r",
								"        sap.n.Adaptive.run(modelAppConfig.oData, modelAppData.oData, \"List\").then(function (data) {\r",
								"\r",
								"            var chartData = data.result || data;\r",
								"\r",
								"            var xAxisTitle = \"\";\r",
								"            var yAxisTitle = \"\";\r",
								"            var xAxisTitleSep = \"\";\r",
								"            var yAxisTitleSep = \"\";\r",
								"\r",
								"            var rowFields = ModelData.Find(modelAppConfig.oData.settings.fieldsRun, [\"type\", \"visible\"], [\"data\", true]);\r",
								"            var colFields = ModelData.Find(modelAppConfig.oData.settings.fieldsRun, [\"type\", \"visible\"], [\"category\", true]);\r",
								"            var valFields = ModelData.Find(modelAppConfig.oData.settings.fieldsRun, [\"type\", \"visible\"], [\"value\", true]);\r",
								"\r",
								"            // No Value Fields -> Auto inject counter field\r",
								"            if (!valFields.length) {\r",
								"\r",
								"                valFields.push({\r",
								"                    name: \"_autocounter\",\r",
								"                    label: \"Entries\"\r",
								"                });\r",
								"\r",
								"                $.each(chartData, function (i, data) {\r",
								"                    data._autocounter = 1;\r",
								"                });\r",
								"\r",
								"            }\r",
								"\r",
								"            // Titles - xAxis\r",
								"            $.each(rowFields, function (i, field) {\r",
								"                xAxisTitle += xAxisTitleSep + field.text;\r",
								"                xAxisTitleSep = \", \"\r",
								"            });\r",
								"\r",
								"            // Titles - yAxis\r",
								"            $.each(colFields, function (i, field) {\r",
								"                yAxisTitle += yAxisTitleSep + field.text;\r",
								"                yAxisTitleSep = \", \"\r",
								"            });\r",
								"\r",
								"            var colDataFields = {};\r",
								"            var colData = {};\r",
								"            var rowData = {};\r",
								"\r",
								"            $.each(chartData, function (i, data) {\r",
								"\r",
								"                var rowKeyData = [];\r",
								"                var rowKeyField = [];\r",
								"                var rowKeyText = \"\";\r",
								"                var rowKeyTextSep = \"\";\r",
								"\r",
								"                // Rows\r",
								"                $.each(rowFields, function (i, field) {\r",
								"\r",
								"                    var fieldName = (field.valueType ? field.name + \"_value\" : field.name);\r",
								"\r",
								"                    if (data[fieldName] === null) return;\r",
								"\r",
								"                    // Formatter \r",
								"                    if (field.formatter) data[fieldName] = sap.n.Adaptive.formatter(data[fieldName], field.formatter);\r",
								"\r",
								"                    rowKeyField.push(fieldName);\r",
								"                    rowKeyData.push(data[fieldName]);\r",
								"                    rowKeyText += rowKeyTextSep + data[fieldName]\r",
								"                    rowKeyTextSep = \", \"\r",
								"                });\r",
								"\r",
								"                if (rowKeyText) rowData[rowKeyText] = ModelData.Find(chartData, rowKeyField, rowKeyData);\r",
								"\r",
								"                var colKeyData = [];\r",
								"                var colKeyField = [];\r",
								"                var colKeyText = \"\";\r",
								"                var colKeyTextSep = \"\";\r",
								"\r",
								"                // Cols\r",
								"                $.each(colFields, function (i, field) {\r",
								"\r",
								"                    var fieldName = (field.valueType ? field.name + \"_value\" : field.name);\r",
								"\r",
								"                    if (data[fieldName] === null) return;\r",
								"\r",
								"                    // Formatter \r",
								"                    if (field.formatter) data[fieldName] = sap.n.Adaptive.formatter(data[fieldName], field.formatter);\r",
								"\r",
								"                    colKeyField.push(fieldName);\r",
								"                    colKeyData.push(data[fieldName]);\r",
								"                    colKeyText += colKeyTextSep + data[fieldName]\r",
								"                    colKeyTextSep = \", \"\r",
								"                });\r",
								"\r",
								"                if (colKeyText) {\r",
								"                    colData[colKeyText] = ModelData.Find(chartData, colKeyField, colKeyData);\r",
								"                    colDataFields[colKeyText] = colKeyField[0];\r",
								"                }\r",
								"\r",
								"            });\r",
								"\r",
								"            var colKeys = Object.keys(colData);\r",
								"            var rowKeys = Object.keys(rowData);\r",
								"\r",
								"            if (!rowKeys.length) rowKeys.push([]);\r",
								"            if (!colKeys.length) colKeys.push([]);\r",
								"\r",
								"            var _i, _j, _len, _len1;\r",
								"\r",
								"            var series = [];\r",
								"            var valField = valFields[0]; // TODO - only 1 value field\r",
								"\r",
								"            for (_i = 0, _len = rowKeys.length; _i < _len; _i++) {\r",
								"\r",
								"                var seriesData = [];\r",
								"                var rowKey = rowKeys[_i];\r",
								"\r",
								"                $.each(colKeys, function (i, colKey) {\r",
								"\r",
								"                    var lookupData = rowData[rowKey] || colData[colKey];\r",
								"                    var recs = ModelData.Find(lookupData, colDataFields[colKey], colKey);\r",
								"\r",
								"                    var values = 0;\r",
								"                    $.each(recs, function (i, rec) {\r",
								"                        values += parseFloat(rec[valField.name]);\r",
								"                    });\r",
								"\r",
								"                    if (modelAppConfig.oData.settings.properties.table.chartType === \"pie\") {\r",
								"                        seriesData.push({ name: colKey, y: values });\r",
								"                    } else {\r",
								"                        seriesData.push(values);\r",
								"                    }\r",
								"\r",
								"                })\r",
								"\r",
								"                series.push({ name: rowKey, data: seriesData });\r",
								"\r",
								"            }\r",
								"\r",
								"            // Categories\r",
								"            var categories = [];\r",
								"            for (_i = 0, _len = colKeys.length; _i < _len; _i++) {\r",
								"                colKey = colKeys[_i];\r",
								"                categories.push(colKey);\r",
								"            };\r",
								"\r",
								"            // Legend\r",
								"            var enabledLegend = modelAppConfig.oData.settings.properties.table.legendEnable;\r",
								"            if (series.length <= 1) enabledLegend = false;\r",
								"\r",
								"            var chartType = modelAppConfig.oData.settings.properties.table.chartType || \"column\";\r",
								"\r",
								"            if (chartType === \"areapercent\") chartType = \"area\";\r",
								"            if (chartType === \"barstacked\" || chartType === \"barpercent\") chartType = \"bar\";\r",
								"            if (chartType === \"columnstacked\" || chartType === \"columnpercent\") chartType = \"column\";\r",
								"\r",
								"            // Options\r",
								"            var options = {\r",
								"                chart: {\r",
								"                    renderTo: report.chartId,\r",
								"                    type: chartType,\r",
								"                    style: { fontFamily: '72' },\r",
								"                    height: modelAppConfig.oData.settings.properties.table.chartHeight || 250,\r",
								"                    backgroundColor: \"transparent\",\r",
								"                },\r",
								"                title: { text: modelAppConfig.oData.settings.properties.table.title },\r",
								"                subtitle: { text: modelAppConfig.oData.settings.properties.table.subTitle },\r",
								"                xAxis: {\r",
								"                    title: {\r",
								"                        text: xAxisTitle,\r",
								"                        enabled: modelAppConfig.oData.settings.properties.table.xAxisTitleEnable\r",
								"\r",
								"                    },\r",
								"                    categories: categories\r",
								"                },\r",
								"                yAxis: {\r",
								"                    title: {\r",
								"                        text: yAxisTitle,\r",
								"                        enabled: modelAppConfig.oData.settings.properties.table.yAxisTitleEnable\r",
								"                    }\r",
								"                },\r",
								"                tooltip: {\r",
								"                    formatter: function () {\r",
								"                        return (this.key && this.key != \"\" ? '<span style=\"font-size: 10px\">' + this.key + '</span><br/>' : \"\") +\r",
								"                            '<span style=\"color:' + this.point.series.color + '\">\\u25CF</span> ' + this.series.name + ': <b>' + Highcharts.numberFormat(this.point.y, 2) + '</b><br/>'\r",
								"                    }\r",
								"                },\r",
								"                legend: {\r",
								"                    align: modelAppConfig.oData.settings.properties.table.legendAlign,\r",
								"                    verticalAlign: modelAppConfig.oData.settings.properties.table.legendVerticalAlign,\r",
								"                    layout: modelAppConfig.oData.settings.properties.table.legendLayout,\r",
								"                    enabled: enabledLegend\r",
								"                },\r",
								"                plotOptions: {\r",
								"                    pie: {\r",
								"                        allowPointSelect: true,\r",
								"                        cursor: 'pointer',\r",
								"                        dataLabels: {\r",
								"                            enabled: true,\r",
								"                            format: '<b>{point.name}</b>: {point.percentage:.1f} %'\r",
								"                        }\r",
								"                    },\r",
								"                    column: { borderRadius: 0 },\r",
								"                    bar: { borderRadius: 0 }\r",
								"                },\r",
								"                credits: false,\r",
								"                series: series\r",
								"            };\r",
								"\r",
								"            // Custom Colors \r",
								"            if (modelAppConfig.oData.settings.properties.table.chartColor) {\r",
								"\r",
								"                try {\r",
								"                    options.colors = JSON.parse(modelAppConfig.oData.settings.properties.table.chartColor);\r",
								"                } catch (e) {\r",
								"\r",
								"                }\r",
								"\r",
								"            }\r",
								"\r",
								"            // Stacking Percent\r",
								"            if (modelAppConfig.oData.settings.properties.table.chartType === \"areapercent\" || modelAppConfig.oData.settings.properties.table.chartType === \"barpercent\" || modelAppConfig.oData.settings.properties.table.chartType === \"columnpercent\") {\r",
								"                options.plotOptions.series = {\r",
								"                    stacking: \"percent\"\r",
								"                }\r",
								"            }\r",
								"\r",
								"            // Stacking Normal\r",
								"            if (modelAppConfig.oData.settings.properties.table.chartType === \"barstacked\" || modelAppConfig.oData.settings.properties.table.chartType === \"columnstacked\") {\r",
								"                options.plotOptions.series = {\r",
								"                    stacking: \"normal\"\r",
								"                }\r",
								"            }\r",
								"\r",
								"            // Render Chart\r",
								"            setTimeout(function () {\r",
								"                report.chart = Highcharts.chart(options)\r",
								"            }, 100);\r",
								"\r",
								"            // Auto Update\r",
								"            if (runtime && parseInt(modelAppConfig.oData.settings.properties.report.updateTime)) {\r",
								"                setTimeout(function () {\r",
								"                    if (!AppCache.isRestricted && !AppCache.isOffline) report.run();\r",
								"                }, parseInt(modelAppConfig.oData.settings.properties.report.updateTime) * 1000 * 60);\r",
								"            }\r",
								"\r",
								"        }).catch(function (data) {\r",
								"            if (data.responseJSON && data.responseJSON.status) sap.m.MessageToast.show(data.responseJSON.status);\r",
								"        });\r",
								"    },\r",
								"\r",
								"\r",
								"\r",
								"}\r",
								"\r",
								"report.start();\r",
								"\r",
								""
							],
							"request": [],
							"response": [],
							"attributes": [],
							"data": []
						}
					]
				}
			]
		},
		{
			"fieldNo": 99998,
			"data": []
		}
	],
	"ver": "22.8.3.1310",
	"application": "planet9_adaptive_tile_chart",
	"title": "Adaptive Tile Chart",
	"description": "Adaptive Tile Chart",
	"enableFileStorage": false,
	"enableManifest": false,
	"enableStylesheet": true,
	"enableObfuscate": false,
	"onlyRunLaunchpad": true,
	"disabled": false,
	"loadLaunchpadCode": null,
	"loadApplicationCode": null,
	"appType": "F",
	"ui5_m": true,
	"ui5_f": false,
	"ui5_table": false,
	"ui5_tnt": false,
	"ui5_uxap": false,
	"ui5_chart": false,
	"ui5_theme": "sap_fiori_3",
	"ui5_version": "",
	"ui5_language": null,
	"cus_theme": "",
	"css": [
		"==OBJECT STRING==",
		".nepNoBorder .sapMPanelContent {\r",
		"    border-bottom: none !important;\r",
		"}"
	],
	"header": "",
	"manifest": "",
	"globalScript": "",
	"deleted": false,
	"libHighchart": false,
	"libHighmap": false,
	"publicAccess": false,
	"ui5_bootstrap": false,
	"apis": []
}